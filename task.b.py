def generate_strings(grammar, current_symbol):
    if current_symbol not in grammar['P']:
        # –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–∏–º–≤–æ–ª - —Ç–µ—Ä–º—ñ–Ω–∞–ª, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
        return [current_symbol]

    result = []
    # –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞, —â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
    for rule in grammar['P'][current_symbol]:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É –ø—Ä–∞–≤–∏–ª–∞
        current_string = ''
        for symbol in rule:
            current_string += ''.join(generate_strings(grammar, symbol))
        result.append(current_string)

    return result
def determine_grammar_type(grammar):
    start_symbol = grammar['S']

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–≤—ñ–ª—å–Ω—ñ—Å—Ç—å
    if all(all(len(production) >= 1 and production[0] in grammar['V'] for production in productions) for
           productions in grammar['P'].values()):
        return "–¢–∏–ø 2 (–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–≤—ñ–ª—å–Ω–∞ –≥—Ä–∞–º–∞—Ç–∏–∫–∞)"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å
    if any(len(production) > 2 and start_symbol in production for productions in grammar['P'].values() for production in
           productions):
        return "–¢–∏–ø 1 (–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–ª–µ–∂–Ω–∞ –≥—Ä–∞–º–∞—Ç–∏–∫–∞)"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ—Å—Ç—å
    if all(
            (len(production) == 2 and production[0] in grammar['V'] and production[1] in grammar['V'].union(
                grammar['T'])) or
            (len(production) == 1 and production[0] in grammar['T'] and production[0] != 'ùúÜ') or
            (len(production) == 2 and production[0] == start_symbol and production[1] == 'ùúÜ') or
            (len(production) == 1 and production[0] == start_symbol and production[0] == 'ùúÜ') for
            productions in grammar['P'].values() for production in productions):
        return "–¢–∏–ø 3 (–†–µ–≥—É–ª—è—Ä–Ω–∞ –≥—Ä–∞–º–∞—Ç–∏–∫–∞)"

    return "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –≥—Ä–∞–º–∞—Ç–∏–∫–∏"
def main():
    # –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
    grammar = {
        'V': {'0', '1', 'S', 'A', 'B'},
        'T': {'0', '1'},
        'S': 'S',
        'P': {
            'S': ['AB', '1A'],
            'A': ['1'],
            'B': ['0', '1']
        }
    }

    # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–∏–º–≤–æ–ª
    start_symbol = grammar['S']

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä—è–¥–∫–∏, –ø–æ—Ä–æ–¥–∂–µ–Ω—ñ –≥—Ä–∞–º–∞—Ç–∏–∫–æ—é
    generated_strings = generate_strings(grammar, start_symbol)

    # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("L(G) =", set(generated_strings))

    grammar_type = determine_grammar_type(grammar)
    print("–¢–∏–ø –≥—Ä–∞–º–∞—Ç–∏–∫–∏:", grammar_type)

if __name__ == "__main__":
    main()
